<?xml version="1.0" encoding="UTF-8"?>
<project name="SF-COMMON-CONFIG" xmlns:hlm="http://www.nokia.com/helium">

    <property environment="env"/> <!-- make environment variables available via env -->
    
    <dirname property="sf.common.config.dir" file="${ant.file.SF-COMMON-CONFIG}"/>
    
    <!-- import common properties -->
    <import file="${sf.common.config.dir}/common_props.ant.xml" />
    
    <!-- setup Helium internal properties from their equivalent in the project spec -->
    <property name="build.name" value="${sf.spec.job.name}"/>
    <property name="core.build.version" value="${sf.spec.job.codeline}"/>
    <property name="build.number" value="${sf.spec.job.number}"/>
    <property name="build.drive" value="${sf.spec.job.drive}"/>
    <property name="build.family" value="${sf.project.type}"/>
    <property name="email.from" value="${sf.spec.email.from}"/>
    <property name="local.free.space" value="${sf.spec.job.freespace}"/>
    <property name="network.free.space" value="${sf.spec.publish.network.freespace}"/>
    <property name="network.drive" value="${sf.spec.publish.networkdrive}"/>
    <property name="prep.root.dir" value="${sf.spec.job.rootdir}"/>
    <property name="publish" value="${sf.spec.publish.enable}"/>
    <property name="publish.root.dir" value="${sf.spec.publish.rootdir}"/>
    <property name="build.system" value="${sf.spec.build.system}"/>
    <property name="base_release.path" value="${sf.spec.baseline.location}"/>
    <property name="base_release.getenv_options" value="${sf.spec.baseline.getenv_options}"/>
    
    <!-- import all core HELIUM targets -->
    <import file="${helium.dir}/helium.ant.xml" />
    
    <!-- import common references -->
    <import file="${sf.common.config.dir}/common_refs.ant.xml" />
             
    <!-- conditional import of generated source spec if available -->
    <if><available  file="${sf.common.config.dir}/generated/source-spec.ant.xml" />
        <then>		    		
            <echo message="Generated source spec found, importing..." />
    				<import file="${sf.common.config.dir}/generated/source-spec.ant.xml"/>
    		</then>
    </if>
     
    
    <target name="sf-prep" depends="sf-generate-source-spec,prep-drive,init-build-area,check-tool-dependencies,create-bom,log-build-env">
        <echo>[SF-PREP]</echo>
        <tempfile property="prep.dynamic.config" suffix="ant.xml" destdir="${temp.build.dir}"/>
    </target>
        
    <target name="sf-build-all" depends="sf-prebuild,sf-build-noprep,sf-postbuild">
        <echo>[SF-BUILD-ALL]</echo>
    </target>
    
    <target name="sf-build" depends="sf-prep,sf-prebuild,sf-build-noprep,sf-postbuild">
        <echo>[SF-BUILD]</echo>
    </target>
    
    <target name="sf-parse-project-config">
    <!-- TODO: Parse the project config and generate properties and csv file to be
    used by the builds. -->
        <echo message="Parse the project configuration" />
    </target>
    
    <target name="sf-generate-source-spec" depends="sf-parse-project-config">
        <!-- TODO: 1. Same file name souce-spec.ant.xml is used for all packages
        for multiple package builds, this needs to be linked with package name. -->
        <!-- TODO: 2. Change fmpp data to be a full property rather than relative path -->
        
        <fmpp sourceFile="${sf.common.config.dir}/templates/source-spec.ant.xml.ftl"
              outputFile="${sf.common.config.dir}/generated/source-spec.ant.xml">
              <data expandProperties="yes">
                    ant: antProperties()
                    data: csv(${sf.project.location}/${sf.spec.sourcesync.sourcespecfile}, {separator:','})
              </data>
        </fmpp>
    </target>
    
    <target name="sf-prebuild">
        <echo>[SF-PREBUILD]</echo>
        
        <!-- create BOM dir -->
        <mkdir dir="${build.drive}/output/logs/BOM"/>
        
        <!-- record project and config information in BOM files -->
        <delete file="${build.drive}/output/logs/BOM/config.csv" quiet="true"/>
        <exec executable="hg" dir="${sf.config.dir}" outputproperty="sf.job.bom.config.repo">
            <arg value="showconfig"/>
            <arg value="paths.default"/>
        </exec>
        <exec executable="hg" dir="${sf.config.dir}" outputproperty="sf.job.bom.config.rev">
            <arg value="identify"/>
            <arg value="-n"/>
        </exec>
        <exec executable="hg" dir="${sf.config.dir}" outputproperty="sf.job.bom.config.checksum">
            <arg value="identify"/>
            <arg value="-i"/>
        </exec>
        <echo message="dir ${sf.config.dir} : revision ${sf.job.bom.config.rev}:${sf.job.bom.config.checksum}"/>
        <exec executable="cmd" output="${build.drive}/output/logs/BOM/config.csv" append="true">
            <arg value="/c"/>
            <arg value="echo"/>
            <arg value="${sf.job.bom.config.repo},sf-config,${sf.job.bom.config.rev}:${sf.job.bom.config.checksum}"/>
        </exec>
        <delete file="${build.drive}/output/logs/BOM/project.csv" quiet="true"/>
        <exec executable="hg" dir="${sf.config.dir}/../build/config" outputproperty="sf.job.bom.project.repo">
            <arg value="showconfig"/>
            <arg value="paths.default"/>
        </exec>
        <exec executable="hg" dir="${sf.config.dir}/../build/config" outputproperty="sf.job.bom.project.rev">
            <arg value="identify"/>
            <arg value="-n"/>
        </exec>
        <exec executable="hg" dir="${sf.config.dir}/../build/config" outputproperty="sf.job.bom.project.checksum">
            <arg value="identify"/>
            <arg value="-i"/>
        </exec>
        <echo message="dir ${sf.config.dir}/../build/config : revision ${sf.job.bom.project.rev}:${sf.job.bom.project.checksum}"/>
        <exec executable="cmd" output="${build.drive}/output/logs/BOM/project.csv" append="true">
            <arg value="/c"/>
            <arg value="echo"/>
            <arg value="${sf.job.bom.project.repo},build/config,${sf.job.bom.project.rev}:${sf.job.bom.project.checksum}"/>
        </exec>
        
        <if>
            <istrue value="${sf.spec.baseline.enable}" />
            <then>
            
                <!-- record baseline information in BOM file -->
                <delete file="${build.drive}/output/logs/BOM/baseline.txt" quiet="true"/>
                <exec executable="cmd" output="${build.drive}/output/logs/BOM/baseline.txt">
                    <arg value="/c"/>
                    <arg value="echo"/>
                    <arg value="${sf.spec.baseline.location}"/>
                </exec>
                
                <!-- run interal target preparation-getenv -->
                <runtarget target="preparation-getenv"/>
                
            </then>
        </if>
        
        <if>
            <istrue value="${sf.spec.sourcesync.enable}" />
            <then>
                <runtarget target="sf-get-source"/>
				
				<if><istrue value="${sf.spec.package.src.enable}"/>
				<then>
					<echo message="INFO Packaging Source"/>
					<runtarget target="sf-package-source"/>
				</then>
				</if>
            </then>
        </if>        
      <if>
        <istrue value="${sf.spec.publish.enable}"/>
        <then>
          <runtarget target="sf-diamondize-bom"/>
        </then>
      </if>
    </target>
    
  <target name="sf-postbuild" depends="sf-zip-logs">
    <echo>[SF-POSTBUILD]</echo>
    
    <!-- TAG SOURCE CODE -->
    <if>
      <istrue value="${sf.spec.tagafterbuild.enable}" />
      <then>
        <echo message="Apply tag to the source code used in this build"/>
        <runtarget target="sf-tag-hg-code"/>
      </then>
    </if>
	
	<if>
		<istrue value="${sf.spec.package.bin.enable}"/>
		<then>
			<echo message="INFO Packaging Binaries"/>
			<runtarget target="sf-package-binary"/>
		</then>
	</if>

    <!-- PUBLISH LOGS/REPORTS -->
    <if>
      <istrue value="${sf.spec.publish.enable}" />
      <then>
        <echo message="Publish log files and reports to ${sf.spec.publish.rootdir}"/>
        <runtarget target="publish"/>
      </then>
    </if>
    
  </target>

  <!-- package all logs into zipfile before publish -->
  <target name="sf-zip-logs">
    <if>
      <istrue value="${sf.spec.logs.zip.enable}"/>
      <then>
        <property name="temp.log.zip" value="${env.TEMP}/build_logs_${sf.spec.job.name}_${build.number}.zip"/>
        <echo message="Zip log requested, zipping logs..."/>
        <zip destfile="${temp.log.zip}" basedir="${build.log.dir}"/>
        <move file="${temp.log.zip}" todir="${build.log.dir}" failonerror="false"/>
      </then>
    </if>
  </target>

  <!-- generate dir list using passed location and name 
  if a baseline list is available then generate deltas too -->

  <target name="sf-list-dir">
    <property name="sf.currentlist.name"   value="${sf.list.name}"/> 
    <property name="sf.dir.location" value="${build.drive}/epoc32"/> 

    <if>
      <istrue value="${sf.spec.dirlist.enable}"/>
      <then>
        <echo message="Dirlist name: ${sf.currentlist.name} requested for ${sf.dir.location}"/>
        <exec executable="perl" dir="${build.log.dir}/" failonerror="true" output="${build.log.dir}/listdir_${build.id}_${sf.currentlist.name}.log">
          <arg value="${sf.common.config.dir}/tools/listdir.pl"/>
          <arg value="${sf.dir.location}"/>
        </exec>
      </then>
    </if>
  </target>
	
  <target name="sf-delta-dir">
    <property name="sf.currentlist_a.name"   value="${sf.list_a.name}"/> 
    <property name="sf.currentlist_b.name"   value="${sf.list_b.name}"/>
    <property name="sf.dir.location" value="${build.drive}/epoc32"/> 
    		
    <if>
      <istrue value="${sf.spec.dirdelta.enable}"/>
      <then>
        <echo message="Delta requested for ${sf.currentlist_a.name} vs ${sf.currentlist_b.name} "/>
        <exec executable="perl" dir="${build.log.dir}/" failonerror="true" output="${build.log.dir}/listdir_${build.id}_${sf.currentlist_b.name}_delta.log">
          <arg value="${sf.common.config.dir}/tools/difflist.pl"/>
          <arg value="${build.log.dir}/listdir_${build.id}_${sf.currentlist_a.name}.log"/>
          <arg value="${build.log.dir}/listdir_${build.id}_${sf.currentlist_b.name}.log"/>
        </exec>
      </then>
    </if>
  </target>
  
    <target name="sf-intersect-dir">
    <property name="sf.currentlist_a.name"   value="${sf.list_a.name}"/> 
    <property name="sf.currentlist_b.name"   value="${sf.list_b.name}"/>
    <property name="sf.dir.location" value="${build.drive}/epoc32"/> 
	
    <if>
      <istrue value="${sf.spec.dirdelta.enable}"/>
      <then>
        <echo message="Inersection requested for ${sf.currentlist_a.name} vs ${sf.currentlist_b.name} "/>
        <exec executable="perl" dir="${build.log.dir}/" failonerror="true" output="${build.log.dir}/listdir_${build.id}_${sf.currentlist_b.name}_intersect.log">
          <arg value="${sf.common.config.dir}/tools/difflist.pl"/>
          <arg value="${build.log.dir}/listdir_${build.id}_${sf.currentlist_a.name}.log"/>
          <arg value="${build.log.dir}/listdir_${build.id}_${sf.currentlist_b.name}.log"/>
          <arg value="-I"/> <!-- run difflist in intersect mode -->
        </exec>
      </then>
    </if>
  </target>
    <target name="sf-build-noprep" depends="sf-compile">
        <echo>[SF-BUILD-NOPREP]</echo>
    </target>
    
    <target name="create-canonical-sysdef-file">
      <if>
        <istrue value="${sf.spec.systemdefinition.assemble}"/>
        <then>
          <echo message="Calling Helium create-canonical-sysdef-file target to assemble sysdef fragments."/>
          <runtarget target="compile.create-canonical-sysdef-file"/>
        </then>
        <else>
          <echo message="Will use ${build.drive}/${sf.spec.systemdefinition.location} as is as sysdef file"/>
          <copy file="${build.drive}/${sf.spec.systemdefinition.location}" tofile="${build.drive}/output/build/canonical_system_definition.xml" failonerror="true" verbose="true"/>
        </else>
      </if>
    </target>
    
    <target name="sf-compile">    
    
    	<!-- TODO: add here assigments to raptor-related ant references -->
 	
    	<!-- hlm:argSet id="sbs.tools.var">
			<hlm:arg name="config" value="${sf.spec.sbs.config}" />
			<hlm:arg name="singlejob" value="..." />
			<hlm:arg name="enable-filter" value="..." />
		</hlm:argSet -->
    	
        <!-- target name="compile-main-prebuild" -->
        <antcall target="compile-main" inheritAll="false">
            <param name="build.system" value="${sf.spec.build.system}"/>
            <param name="sysdef.configurations.list" value="${sf.spec.sysdef.configurations.list}" />
            <!--<reference refid="sf.system.definition.files" torefid="system.definition.files" />-->
        </antcall>    
    </target>
    
    <target name="sf-get-source" depends="sf-generate-source-spec">
        <ant antfile="${sf.common.config.dir}/generated/source-spec.ant.xml" />
    </target>
    
    <target name="sf-tag-hg-code">
      <property name="sf.tagafterbuild.tag" value="${sf.spec.job.name}_${sf.spec.job.codeline}.${sf.spec.job.number}"/>
      <fmpp sourceFile="${sf.common.config.dir}/templates/tag-hg-code.ant.xml.ftl"
            outputFile="${sf.common.config.dir}/generated/tag-hg-code.ant.xml">
        <data expandProperties="yes">
              ant: antProperties()
              data: csv(${sf.project.location}/${sf.spec.sourcesync.sourcespecfile}, {separator:','})
        </data>
      </fmpp>
      <ant antfile="${sf.common.config.dir}/generated/tag-hg-code.ant.xml"/>
    </target>
    
    <target name="sf-diamondize-bom">
      <fmpp sourceFile="${sf.common.config.dir}/templates/build-info.xml.ftl"
            outputFile="${build.drive}/output/logs/BOM/build-info.xml">
        <data expandProperties="yes">
              ant: antProperties()
              config: csv(${build.drive}/output/logs/BOM/config.csv,{separator:',',headers:[loc,dst,rev]})
              project: csv(${build.drive}/output/logs/BOM/project.csv,{separator:',',headers:[loc,dst,rev]})
              baseline: slicedText(${build.drive}/output/logs/BOM/baseline.txt,{trim})
              sources: csv(${build.drive}/output/logs/BOM/sources.csv,{separator:',',headers:[loc,dst,rev]})              
        </data>
      </fmpp>
    </target>

	<target name="sf-preprocess-package-config">
        <exec executable="perl" dir="${build.drive}/" failonerror="true" output="${build.log.dir}/zipconfig.log">
          <arg value="${sf.common.config.dir}/tools/populateziptemplate.pl"/>
          <arg value="${sf.project.location}/${sf.spec.sourcesync.sourcespecfile}"/>
          <arg value="${sf.common.config.dir}/templates/zip.cfg.xml.ftl.template"/>
        </exec>
	</target>
	
	<target name="sf-zip-content" depends="preprocess-zip-config">
		<property name="zip.${zip.target.name}.log.file" location="${build.log.dir}/${build.id}_${zip.target.name}_zip.log" />
		<property name="zips.${zip.target.name}.spec.name" value="${zip.target.name}" />
		<hlm:zipContentMacro type="${zip.target.name}" file="${zip.config.file}" />
	</target>
	
	<target name="sf-package-source" depends="sf-preprocess-package-config">
		<antcall target="sf-zip-content">
			<param name="zip.config.file" value="${sf.common.config.dir}/templates/zip.cfg.xml.ftl"/>
			<param name="zip.target.name" value="src" />
		</antcall>	
	</target>
	
	<target name="sf-package-binary" depends="sf-preprocess-package-config">
		<antcall target="sf-zip-content">
		    <param name="zip.config.file" value="${sf.common.config.dir}/templates/zip.cfg.xml.ftl"/>
			<param name="zip.target.name" value="bin" />
		</antcall>	
	</target>
	
</project>


